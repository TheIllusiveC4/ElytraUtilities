plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
}

archivesBaseName = "${mod_id}-fabric"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${fabric_parchment_mc_version}:${fabric_parchment_version}@zip")
    })
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")

    // Optional
    modCompileOnly "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}", {
        exclude group: "net.fabricmc.fabric-api"
    }
    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}", {
        exclude group: "net.fabricmc.fabric-api"
    }
    modRuntimeOnly "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}", {
        exclude group: "net.fabricmc.fabric-api"
    }
    modRuntimeOnly "com.terraformersmc:modmenu:${project.modmenu_version}", {
        exclude group: "net.fabricmc.fabric-api"
    }
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}


processResources {
    from project(":common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    filesMatching('*.mixins.json') {
        expand "refmap_target": "${archivesBaseName}-"
    }
}

sourceSets.main.resources.srcDir '../.docs'

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
